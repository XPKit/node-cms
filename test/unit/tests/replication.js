const chai = require('chai')
const should = chai.should()
const _ = require('lodash')
const path = require('path')
const { promisify } = require('util')
const Helper = require('../../helper')

// Helper function to promisify methods
function promisifyMethod(obj, method) {
  return promisify(obj[method].bind(obj))
}
let helper

exports.suite = () => {
  let article2 = false
  before(async () => {
    helper = Helper.getInstance()

    let record = await helper.createArticle(helper.master, {title: 'first'})
    helper.article = record
    await helper.uploadArticleAttachment(helper.master, helper.article._id, '_large.png')
    await helper.uploadArticleAttachment(helper.master, helper.article._id, '_small.jpg')
    await helper.createArticle(helper.master, {title: 'second'})
    await helper.createArticle(helper.master, {title: 'third'})
  })

  // populate slave with content

  before(async () => {
    let record = await helper.createArticle(helper.slave, {title: 'first'})
    article2 = record
    await helper.uploadArticleAttachment(helper.slave, record._id, '_medium.png')
    await helper.createArticle(helper.slave, {title: 'second'})
    await helper.createArticle(helper.slave, {title: 'third'})
  })

  // remove autogenerated files
  // eslint-disable-next-line no-undef
  after(() => {
    helper.removeFiles(
      path.join(__dirname, '../..', 'master'),
      path.join(__dirname, '../..', 'master.json'),
      path.join(__dirname, '../..', 'slave'),
      path.join(__dirname, '../..', 'slave.json'),
      path.join(__dirname, '../..', '_large_copy.png'),
      path.join(__dirname, '../..', 'tmp')
    )
  })

  it('should replicate from master to slaves', async () => {
    await promisifyMethod(helper.slave.cms, 'replicate')('localhost', helper.MASTER_NET_PORT, `${helper.MASTER_URL}/api/`, 'articles')
    // await helper.slave.cms.replicate('localhost', helper.MASTER_NET_PORT, `${helper.MASTER_URL}/api/`, 'articles')
  })

  // it 'should have index synced', (done) ->
  //   master.cms.resource('articles').file.getIndex (index) ->
  //     slave.cms.resource('articles').file.getIndex (index2) ->
  //       index2.should.deep.equal index
  //       do done

  it('should have json content synced', async () => {
    let articles = await helper.master.request.get('/api/articles?unpublished=true')
      .expect(200)

    let articles2 = await helper.slave.request.get('/api/articles?unpublished=true')
      .expect(200)

    _.each(_.union(articles.body, articles2.body), item => delete item._local)
    articles2.body.should.deep.equal(articles.body)
  })

  it('should have binary content synced to slave', async () => {
    let {body} = await helper.slave.request.get(`/api/articles/${helper.article._id}`)
      .expect(200)
    const record = body
    const attachments = record._attachments
    attachments.should.have.length(2)
    await helper.compareChecksumForArticle(helper.slave, record._id, attachments[0], '_large.png')
    await helper.compareChecksumForArticle(helper.slave, record._id, attachments[1], '_small.jpg')
  })

  it('should have binary content synced to master', async () => {
    let {body} = await helper.master.request.get(`/api/articles/${article2._id}`)
      .expect(200)

    should.exist(body)

  // slave file can't sync to master, add by kong
  // const record = body
  // const attachments = record._attachments
  // await compareChecksum(master, record._id, attachments[0], '_medium.png')
  })

  describe('Downstream & Upstream', () => {
    let masterRecord = null
    let slaveRecord = null
    let masterRecordUp = null
    let slaveRecordUp = null

    before(() => {
      helper.master.cms.resource('downstream-collection',
        { acl: {'*': '1111'}, type: 'downstream' })
      helper.master.cms.resource('upstream-collection',
        { acl: {'*': '1111'}, type: 'upstream' })
      helper.slave.cms.resource('downstream-collection',
        { acl: {'*': '1111'}, type: 'downstream' })
      helper.slave.cms.resource('upstream-collection',
        { acl: {'*': '1111'}, type: 'upstream' })
    })
    before(() => promisifyMethod(helper.master.cms, 'allow')('anonymous', 'downstream-collection'))
    before(() => promisifyMethod(helper.slave.cms, 'allow')('anonymous', 'downstream-collection'))
    before(() => promisifyMethod(helper.master.cms, 'allow')('anonymous', 'upstream-collection'))
    before(() => promisifyMethod(helper.slave.cms, 'allow')('anonymous', 'upstream-collection'))

    before(async () => {
      let {body} = await helper.master.request
        .post('/api/downstream-collection')
        .send({ content: 'Master changes' })
        .expect(200)

      masterRecord = body
    })

    before(async () => {
      let {body} = await helper.master.request
        .post('/api/upstream-collection')
        .send({ content: 'Master changes' })
        .expect(200)

      masterRecordUp = body
    })

    before(async () => {
      let {body} = await helper.slave.request
        .post('/api/downstream-collection')
        .send({ content: 'Slave changes' })
        .expect(200)

      slaveRecord = body
    })

    before(async () => {
      let {body} = await helper.slave.request
        .post('/api/upstream-collection')
        .send({ content: 'Slave changes' })
        .expect(200)

      slaveRecordUp = body
    })

    before(async () => {
      await promisifyMethod(helper.slave.cms, 'replicate')('localhost', helper.MASTER_NET_PORT, `${helper.MASTER_URL}/api/`, 'downstream-collection')
      await promisifyMethod(helper.slave.cms, 'replicate')('localhost', helper.MASTER_NET_PORT, `${helper.MASTER_URL}/api/`, 'upstream-collection')
    })

    it('should only pull changes from master (downstream)', async () => {
      let slaveApi = helper.slave.cms.resource('downstream-collection').json
      let masterApi = helper.master.cms.resource('downstream-collection').json
      let result = await promisifyMethod(slaveApi, 'find')(slaveRecord._id)
      should.exist(result)
      result = await promisifyMethod(slaveApi, 'find')(masterRecord._id)
      should.exist(result)
      result = await promisifyMethod(masterApi, 'find')(masterRecord._id)
      should.exist(result)
      result = await promisifyMethod(masterApi, 'find')(masterRecord._id)
      should.exist(result)
    })

    return it('should only pull changes from slave (upstream)', async () => {
      let masterApi = helper.master.cms.resource('upstream-collection').json
      let slaveApi = helper.slave.cms.resource('upstream-collection').json
      let result = await promisifyMethod(masterApi, 'find')(masterRecordUp._id)
      should.exist(result)
      result = await promisifyMethod(masterApi, 'find')(slaveRecordUp._id)
      should.exist(result)
      result = await promisifyMethod(slaveApi, 'find')(slaveRecordUp._id)
      should.exist(result)
      try {
        await promisifyMethod(slaveApi, 'find')(masterRecordUp._id)
        throw new Error('should return error')
      } catch (error) {
        should.exist(error)
      }
    })
  })
}
